const { Varying } = require('janus');
const $ = require('jquery');
const { find } = require('./mutators');
const { ManagedObservation } = require('janus-stdlib').varying;

const preload = src -> {
  const v = Varying.of(src);
  find('div').video({ all: { point() { return v; } } })($('<div/>'))($('<div/>'));
  v.set(null);
};


const fix = (f =>
  (x => f(y => x(x)(y)))
  (x => f(y => x(x)(y)))
);


const scheduler = => {
  let timer;
  return |video, start, end, framerate, cb => {
    timer = clearTimeout(timer);
    guard video;
    const target = end / framerate;
    const oneFrame = 1 / framerate;
    const threshold = (end - start) / framerate * 1000 - oneFrame;

    const check = -> {
      if (curTimer isnt timer) return;
      const delta = target - video.currentTime;
      if (delta > 0.1) curTimer = timer = setTimeout(check, (delta - 0.1) * 1000);
      else if (delta >= oneFrame) requestAnimationFrame(check);
      else cb();
    };
    let curTimer = timer = setTimeout(check, threshold);
  };
};


const zipLast = v => {
  return Varying.managed(ManagedObservation.with(v), mo => {
    const result = new Varying([]);
    mo.react(y -> result.set([ result._value[1], y ]));
    return result;
  });
};

module.exports = { preload, fix, scheduler, zipLast };

