const { Map, Model, attribute, initial, bind, from, List } = require('janus');
const BaseApp = require('janus').App;


////////////////////////////////////////////////////////////////////////////////
// MODELS

class Clip extends Model;
class Clips extends List.of(Clip);

class Frame extends attribute.Number;
class Shot extends Model.build(
  attribute('start', Frame),
  attribute('end', Frame),
  attribute('ends', attribute.Boolean),
  attribute('autoadvance', attribute.Boolean),
  attribute('loop', attribute.Boolean),
  attribute('mute', attribute.Boolean)
);
class Shots extends List.of(Shot);

class Text extends Model.build(
  initial('text', 'text'),
  initial('left', 0.5),
  initial('top', 0.5),
  attribute('big', attribute.Boolean),
  attribute('bold', attribute.Boolean),
  attribute('italic', attribute.Boolean),
  attribute('mono', attribute.Boolean),
  attribute('invert', attribute.Boolean)
);
class Texts extends List.of(Text);
class Rect extends Model.build(
  initial('x1', 0.4), initial('x2', 0.6),
  initial('y1', 0.4), initial('y2', 0.6),
  attribute('round', attribute.Boolean),
  attribute('invert', attribute.Boolean)
);
class Rects extends List.of(Rect);
class Slide extends Model.build(
  attribute('name', attribute.Text),
  attribute('major', attribute.Boolean),
  attribute('shots', attribute.List.of(Shots)),
  attribute('texts', class extends attribute.List.of(Texts) {
    initial() { return new Texts(); }
  }),
  attribute('rects', class extends attribute.List.of(Rects) {
    initial() { return new Rects(); }
  })
);
class Slides extends List.of(Slide);

class Film extends Model.build(
  attribute('slides', attribute.List.of(Slides)),
  attribute('clips', class extends attribute.Model {
    static deserialize(clips) {
      for (const k of Object.keys(clips)) clips[k] = new Map(clips[k]);
      return new Map(clips);
    }
  })
);
class Export extends Model;


////////////////////////////////////////////////////////////////////////////////
// VIEWMODELS

class Projector extends Model.build(
  attribute('slide', class extends attribute.Enum {
    initial() { return this.model.get_('film').get_('slides').get_(0); }
    _values() { return from('film').get('slides'); }
  }),
  bind('time', from('film').get('slides').and('slide').all.flatMap(|ss, s => ss.indexOf(s))),
  bind('major-slides', from('film').get('slides').flatMap(.filter(.get('major')).length))
) {
  _navigate(delta) {
    const idx = this.get_('time') + delta;
    guard const tgt = this.get_('film').get_('slides').get_(idx);
    this.set('slide', tgt);
  }
  previous() { this._navigate(-1); }
  nextSlidePlease() { this._navigate(+1); }
};


class App extends BaseApp.build(
  attribute('editing', attribute.Boolean)
);


module.exports = {
  Clip, Clips,
  Frame, Shot, Shots,
  Text, Texts, Rect, Rects, Slide, Slides,
  Film,
  Projector, App, Export
};

