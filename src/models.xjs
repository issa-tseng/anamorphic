const { Map, Model, attribute, initial, bind, from, List } = require('janus');


////////////////////////////////////////////////////////////////////////////////
// MODELS

class Clip extends Model;
class Clips extends List.of(Clip);

class Shot extends Model;
class Shots extends List.of(Shot);
class Slide extends Model.build(
  attribute('shots', attribute.List.of(Shots))
);
class Slides extends List.of(Slide);

class Film extends Model.build(
  attribute('slides', attribute.List.of(Slides)),
  attribute('clips', class extends attribute.Model {
    static deserialize(clips) {
      for (const k of Object.keys(clips)) clips[k] = new Map(clips[k]);
      return new Map(clips);
    }
  })
);


////////////////////////////////////////////////////////////////////////////////
// VIEWMODELS

class Projector extends Model.build(
  attribute('slide', class extends attribute.Enum {
    initial() { return this.model.get_('film').get_('slides').get_(0); }
    _values() { return from('film').get('slides'); }
  }),
  bind('time', from('film').get('slides').and('slide').all.flatMap(|ss, s => ss.indexOf(s))),
  bind('major-slides', from('film').get('slides').flatMap(.filter(.get('major')).length))
) {
  _navigate(delta) {
    const idx = this.get_('time') + delta;
    guard const tgt = this.get_('film').get_('slides').get_(idx);
    this.set('slide', tgt);
  }
  previous() { this._navigate(-1); }
  nextSlidePlease() { this._navigate(+1); }
};


class App extends Model.build;


module.exports = {
  Clip, Clips,
  Shot, Shots, Slide, Slides,
  Film,
  Projector, App
};

