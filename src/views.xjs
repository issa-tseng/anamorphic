const { abs } = Math;
const { DomView, template, from } = require('janus');
const $ = require('jquery');
const { Projector, Viewport } = require('./models');
const { find } = require('./mutators');

const deferred = f => x -> setTimeout((-> f(x)), 0); // ugh this is always a hack.

const ProjectorView = DomView.build($(`
  <div class="projector">
    <div class="viewports"/>
    <div class="clips"/>
  </div>`), template(
  find('.viewports')
    .render(from('viewports'))
    .classGroup('active-', from('shot').flatMap(.length)),
  find('.clips').render(from('clips'))
));

class ViewportView extends DomView.build(
  $('<div class="viewport"/>'),
  find('div').video(from('subshot').get('clip').get('src'))
) {
  _wireEvents() {
    const dom = this.artifact();
    this.reactTo(this.subject.get('subshot'), deferred(subshot -> {
      guard const video = dom.children('video')[0];
      const start = subshot.get_('start');
      const framerate = subshot.get_('clip').get_('framerate');

      video.currentTime = start / framerate;
      video.volume = (subshot.get_('mute') === true) ? 0 : 1;

      const end = subshot.get_('end') {
        const target = end / framerate;
        const oneFrame = 1 / framerate;
        const threshold = (end - start) / framerate * 1000 - oneFrame;
        const check = -> {
          if (abs(video.currentTime - target) >= oneFrame)
            return requestAnimationFrame(check);

          if (subshot.get_('loop') !== true) {
            video.pause();
            video.currentTime = target;
          } else {
            video.currentTime = start / framerate;
            setTimeout(check, threshold);
          }
        };
        setTimeout(check, threshold);
      };
      video[?end ? 'play' : 'pause']();
    }));
  }
}

module.exports = library -> {
  library.register(Projector, ProjectorView);
  library.register(Viewport, ViewportView);
};

