const { abs } = Math;
const { DomView, template, from } = require('janus');
const $ = require('jquery');
const { Projector, Viewport, Slide } = require('./models');
const { find } = require('./mutators');
const { fix, scheduler } = require('./util');

const deferred = f => x -> setTimeout((-> f(x)), 0); // ugh this is always a hack.

const ProjectorView = DomView.build($(`
  <div class="projector">
    <div class="viewports"/>
    <div class="slides"/>
  </div>`), template(
  find('.viewports')
    .render(from('viewports'))
    .classGroup('active-', from('slide-shots').flatMap(.length)),
  find('.slides')
    .render(from('film').get('slides'))
    .css('column-count', from('major-slides'))
    .css('width', from('major-slides').map(x => `${x * 14}em`))
));

class ViewportView extends DomView.build(
  $('<div class="viewport"/>'),
  find('div').video(from('shot').get('clip').get('src'))
) {
  _wireEvents() {
    const dom = this.artifact();
    const schedule = scheduler();

    this.reactTo(this.subject.get('shot'), deferred(shot -> {
      guard const video = dom.children('video')[0];
      const start = shot.get_('start');
      const framerate = shot.get_('clip').get_('framerate');

      video.currentTime = start / framerate;
      video.volume = (shot.get_('mute') === true) ? 0 : 1;

      const end = shot.get_('end') {
        fix(set => => schedule(video, start, end, framerate, -> {
          if (shot.get_('loop') !== true) {
            video.pause();
            video.currentTime = end / framerate;
          } else {
            video.currentTime = start / framerate;
            set();
          }
        }))();
      };
      video[?end ? 'play' : 'pause']();
    }));
  }
}

const SlideView = DomView.build(
  $('<a href="#"/>'),
  find('a')
    .text(from('name'))
    .classed('major', from('major'))
    .classed('active', from.self().flatMap(.closest(Projector)).map(.subject)
      .and.subject()
      .all.flatMap(|projector, slide => projector.get('slide').map(s => s === slide)))

    // TODO: is there some best of both worlds here?
    .on('click', |event, subject, view, dom -> {
      event.preventDefault();
      view.closest_(Projector).subject.set('time', dom.prevAll().length);
    })
);


module.exports = library -> {
  library.register(Projector, ProjectorView);
  library.register(Viewport, ViewportView);
  library.register(Slide, SlideView);
};

