const { abs } = Math;
const { DomView, template, from, Model, bind } = require('janus');
const $ = require('jquery');
const { Projector, Shot, Slide } = require('./models');
const { find } = require('./mutators');
const { fix, scheduler } = require('./util');

const deferred = f => setTimeout(f, 0);

const ProjectorView = DomView.build($(`
  <div class="projector">
    <div class="screen"/>
    <div class="slides"/>
  </div>`), template(
  find('.screen').render(from('slide')).context('screen'),
  find('.slides')
    .render(from.attribute('slide')).criteria({ context: 'edit', style: 'list' })
    .css('column-count', from('major-slides'))
    .css('width', from('major-slides').map(x => `${x * 14}em`))
));

const SlideMainView = DomView.build($(`
  <div class="slide">
    <div class="shots"/>
  </div>`), template(
  find('.shots')
    .render(from('shots'))
    .classGroup('count-', from('shots').flatMap(.length))
));

const ShotVM = Model.build(
  bind('clip', from.app('film').get('clips')
    .and.subject('clip').all.flatMap(|cs, k => cs.get(k)))
);
class ShotView extends DomView.build(ShotVM, $(`
  <div class="shot">
    <div class="video"/>
  </div>`), template(
  find('.video').video(from.vm('clip').flatMap(.get('src')))
)) {
  _wireEvents() {
    const shot = this.subject;
    const shotvm = this.vm;
    const dom = this.artifact();
    const schedule = scheduler();

    deferred(-> {
      guard const video = dom.find('.video video')[0];
      const start = shot.get_('start');
      const framerate = shotvm.get_('clip').get_('framerate');

      video.currentTime = start / framerate;
      video.volume = (shot.get_('mute') === true) ? 0 : 1;

      const end = shot.get_('end') {
        fix(set => => schedule(video, start, end, framerate, -> {
          if (shot.get_('loop') !== true) {
            video.pause();
            video.currentTime = end / framerate;
          } else {
            video.currentTime = start / framerate;
            set();
          }
        }))();
      };
      video[?end ? 'play' : 'pause']();
    });

    this.on('destroying', -> {
      schedule();
      dom.find('video').trigger('detach');
    });
  }
}

const SlideView = DomView.build(
  $('<a href="#"/>'),
  find('a')
    .text(from('name'))
    .classed('major', from('major'))
    .classed('active', from.self().flatMap(.closest(Projector)).map(.subject)
      .and.subject()
      .all.flatMap(|projector, slide => projector.get('slide').map(s => s === slide)))

    // TODO: is there some best of both worlds here?
    .on('click', |event, subject, view, dom -> {
      event.preventDefault();
      view.closest_(Projector).subject.set('time', dom.prevAll().length);
    })
);


module.exports = library -> {
  library.register(Projector, ProjectorView);
  library.register(Slide, SlideMainView, { context: 'screen' });
  library.register(Shot, ShotView);
  library.register(Slide, SlideView);
};

