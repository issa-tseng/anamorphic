const { abs, round, min } = Math;
const { Varying, DomView, template, from, Model, bind, attribute, Case } = require('janus');
const $ = require('jquery');
const { Projector, Text, Rect, Slide, Shots, Shot, Frame, Export } = require('./models');
const { find } = require('./mutators');
const { drag } = require('./drag');
const { fix, scheduler, zipLast } = require('./util');

const { above, below } = Case.build('above', 'below');
const dir = x => above.match(x) ? 'drag-above' : 'drag-below';
const adj = x => below.match(x) ? 1 : 0;

////////////////////////////////////////////////////////////////////////////////
// PROJECTOR VIEW

class ProjectorView extends DomView.build($(`
  <div class="projector">
    <div class="screen"/>
    <div class="editing"/>
    <div class="slides"/>
    <button class="add-slide">+</button>
    <div class="export"/>
  </div>`), template(
  find('.projector').classed('is-editing', from.app('editing')),
  find('.screen').render(from('slide')).context('screen'),
  find('.slides')
    .render(from.attribute('slide')).criteria({ context: 'edit', style: 'list' })
    .css('column-count', from('major-slides'))
    .css('width', from('major-slides').map(x => `${x * 14}em`)),
  find('.editing')
    .render(from.app().attribute('editing'))
      .criteria({ context: 'edit', style: 'button' })
      .options({ stringify: (e => e ? 'editing' : 'edit') }),
  find('.add-slide').on('click', |_, projector -> {
    const clip = projector.get_('slide').get_('shots').get_(0)?.get_('clip');
    const slide = new Slide({ name: 'new slide', shots: new Shots([ new Shot({ clip }) ]) });
    projector.get_('film').get_('slides').add(slide);
  }),
  find('.export').render(from('export'))
)) {
  drag(slide) {
    const slides = this.subject.get_('film').get_('slides');
    const container = this.artifact().children('.slides');

    const target = new Varying();
    const o_ = zipLast(target).react(false, |[ old, ny ] -> {
      old?.get().artifact().removeClass(dir(old));
      ny?.get().artifact().addClass(dir(ny));
    });

    container.on('mousemove', 'a', event -> {
      const dom = $(event.target);
      const view = dom.data('view');
      target.set(do {
        if (view.subject is slide) null;
        if (event.originalEvent.offsetY < (dom.outerHeight() / 2)) above(view);
        else below(view);
      });
    });

    $(window).one('mouseup', -> {
      container.off('mousemove');
      const cur = target.get() { slides.move(slide, slides.list.indexOf(cur.get().subject) + adj(cur)); }
      target.set(null);
      o_.stop();
    });
  }
}

////////////////////////////////////////////////////////////////////////////////
// SLIDE LISTITEM

const SlideListView = DomView.build(
  $('<a/>'),
  find('a')
    .text(from('name'))
    .classed('major', from('major'))
    .on('mousedown', |event, slide, view -> {
      event.preventDefault();
      view.closest_(ProjectorView).drag(slide);
    })
);

////////////////////////////////////////////////////////////////////////////////
// SLIDE VIEW

const SlideMainVM = Model.build(
  attribute('clip', class extends attribute.Enum {
    _values() { return from.app('film').get('clips').map(.keys()); }
  })
);
const SlideMainView = DomView.build(SlideMainVM, $(`
  <div class="slide">
    <div class="shots"/>
    <div class="texts"/>
    <div class="rects"/>
    <div class="edit-chrome slide-edit">
      <span class="input-name"/>
      <label class="input-major"><span/>major</label>
      <button class="slide-remove">x</button>
    </div>
    <div class="edit-chrome slide-edit right">
      <button class="add-text">+text</button>
      <button class="add-rect">+rect</button>
      <span class="clip-selector"/>
      <button class="add-clip">+</button>
      <button class="export">export</button>
    </div>
  </div>`), template(
  find('.shots')
    .render(from('shots'))
      .options(from.app('editing').map(e => ({ renderItem: .context(e ? 'edit' : null) })))
    .classGroup('count-', from('shots').flatMap(.length)),

  find('.texts').render(from('texts')),
  find('.rects').render(from('rects')),

  find('.input-name').render(from.attribute('name')).context('edit'),
  find('.input-major span').render(from.attribute('major')).context('edit'),

  find('.slide-remove').on('dblclick', |_, slide, view -> slide.destroy()),

  find('.add-text').on('click', |_, slide -> slide.get_('texts').add(new Text())),
  find('.add-rect').on('click', |_, slide -> slide.get_('rects').add(new Rect())),

  find('.clip-selector').render(from.vm().attribute('clip')).context('edit'),
  find('.add-clip').on('click', |_, slide, view ->
    slide.get_('shots').add(new Shot({ clip: view.vm.get_('clip') }))),
  find('.export').on('click', |_, _, view -> {
    const data = view.closest_(Projector).subject.get_('film').serialize();
    view.closest_(Projector).subject.set('export', new Export({ data }));
  })
));

////////////////////////////////////////////////////////////////////////////////
// SHOT VIEW (split display / edit)

class ShotVM extends Model.build(
  bind('clip', from.app('film').get('clips')
    .and.subject('clip').all.flatMap(|cs, k => cs.get(k))),
  attribute('play', attribute.Boolean)
) {
  _initialize() {
    const shot = this.get_('subject');
    this.set('play', (?shot.get_('end'))); // TODO: xjs bug
    this.reactTo(this.get('play'), false, play -> {
      if (play) { shot.set('end', this.get_('_end') ?? shot.get_('start')); }
      else { this.set('_end', shot.get_('end')); shot.unset('end'); }
    });
  }
};
class ShotView extends DomView.build(ShotVM, $(`<div class="shot"/>`),
  find('div').video(from.vm('clip').get('src'), false)
) {
  _wireEvents() {
    const shot = this.subject;
    const shotvm = this.vm;
    const dom = this.artifact();
    const schedule = scheduler();

    const play = -> {
      guard const video = dom.children('video')[0];
      const start = shot.get_('start');
      const framerate = shotvm.get_('clip').get_('framerate');

      video.currentTime = start / framerate;
      video.volume = (shot.get_('mute') === true) ? 0 : 1;

      const end = shot.get_('end') {
        if (shot.get_('ends') === true) {
          fix(set => => schedule(video, start, end, framerate, -> {
            if (shot.get_('autoadvance') === true) {
              this.closest_(Projector).subject.nextSlidePlease();
            } else if (shot.get_('loop') !== true) {
              video.pause();
              video.currentTime = end / framerate;
            } else {
              video.currentTime = start / framerate;
              set();
            }
          }))();
        }
      };
      video[?end ? 'play' : 'pause']();
    };

    play();
    this.listenTo($(document), 'keydown', event -> {
      event.preventDefault();
      if (event.which is 9) play();
    });

    this.on('destroying', -> {
      schedule();
      dom.find('video').trigger('detach');
    });
  }
}
class ShotEditor extends DomView.build(ShotVM, $(`
  <div class="shot shot-editor">
    <div class="video"/>
    <div class="delimit start">
      <div class="editor"/>
      <button class="go">&lt;&lt;</button>
      <button class="set">&lt;!</button>
    </div>
    <div class="delimit end">
      <div class="editor"/>
      <button class="set">!&gt;</button>
      <button class="go">&gt;&gt;</button>
    </div>
    <div class="inputs">
      <label><span class="input-play"/>play</label>
      <label><span class="input-ends"/>ends</label>
      <label class="autoadvance"><span class="input-autoadvance"/>autoadvance</label>
      <label><span class="input-loop"/>loop</label>
      <label><span class="input-mute"/>mute</label>
    </div>
  </div>
`), template(
  find('.shot-editor').classed('has-end', from('ends')),
  // video
  find('.video').video(from.vm('clip').get('src'), true),
  // delimits
  find('.start').classed('at', from('start').and.vm('at').all.map(|x, y => ?x && x is y)),
  find('.start .editor').render(from.attribute('start')),
  find('.end').classed('at', from('end').and.vm('at').all.map(|x, y => ?x && x is y)),
  find('.end .editor').render(from.attribute('end')),
  find('.go') .on('click', |event, shot, view ->
    view.go(shot.get_(($(event.target).text() < '>') ? 'start' : 'end'))),
  find('.set').on('click', |event, shot, view ->
    shot.set(($(event.target).text() is '<!') ? 'start' : 'end', view.vm.get_('at'))),
  // inputs
  find('.input-play').render(from.vm().attribute('play')).context('edit'),
  find('.input-ends').render(from.attribute('ends')).context('edit'),
  find('.input-autoadvance').render(from.attribute('autoadvance')).context('edit'),
  find('.input-loop').render(from.attribute('loop')).context('edit'),
  find('.input-mute').render(from.attribute('mute')).context('edit')
)) {
  go(time) {
    guard time;
    guard const video = this.artifact().find('video')[0];
    const framerate = this.vm.get_('clip').get_('framerate');
    video.currentTime = time / framerate;
  }
  _wireEvents() {
    const shot = this.subject;
    this.reactTo(shot.get('start'), ::this.go);
    this.reactTo(shot.get('end'), false, ::this.go);

    guard const video = this.artifact().find('video')[0] else throw 'no video??';
    const framerate = this.vm.get_('clip').get_('framerate');
    const handler = -> this.vm.set('at', round(video.currentTime * framerate));
    video.addEventListener('timeupdate', handler); // old school for perf.
    this.on('destroying', -> video.removeEventListener('timeupdate', handler));
  }
  _destroy() { this.artifact().find('video').trigger('detach'); }
};

const FrameEditor = DomView.build($(`
  <div class="frame-attribute">
    <button>-10</button><button>-5</button><button>-1</button>
    <button>+1</button><button>+5</button><button>+10</button>
  </div>
`), template(
  find('div').on('click', 'button', |event, subject -> {
    const delta = $(event.target).text() |> parseInt;
    subject.setValue(subject.getValue_() + delta);
  })
));

////////////////////////////////////////////////////////////////////////////////
// ANNOTATIONS

const pct = x => `${x * 100}%`;
const toggle = prop => template(
  find('.annotation').classed(prop, from(prop)),
  find(`.input-${prop}`).render(from.attribute(prop)).context('edit')
);
class TextView extends DomView.build($(`
  <div class="text annotation">
    <div class="handle edit-chrome"></div>
    <div class="content"/>
    <div class="tools edit-chrome">
      <label><span class="input-big"/>big</label>
      <label><span class="input-bold"/>bold</label>
      <label><span class="input-italic"/>italic</label>
      <label><span class="input-mono"/>mono</label>
      <label><span class="input-invert"/>inv</label>
      <button class="delete">x</button>
    </div>
  </div>`), template(
  find('.text')
    .css('left', from('left').map(pct))
    .css('top', from('top').map(pct)),
  find('.content').prop('contenteditable', from.app('editing').map(x => x is true)),
  find('.handle').on('mousedown', drag('left', 'top')),
  toggle('big'), toggle('bold'), toggle('italic'), toggle('mono'), toggle('invert'),
  find('.delete').on('click', |_, text -> text.destroy())
)) {
  _wireEvents() {
    const dom = this.artifact();
    const text = this.subject;

    // cheating because we can. until we can't someday.
    const content = dom.find('.content');
    content.html(text.get_('text'));
    this.listenTo(content, 'keyup', event -> {
      event.stopPropagation();
      text.set('text', content.html());
    });
  }
}

const lcomp = |x, y => (x < y) ? 'min' : 'max';
class RectVM extends Model.build(
  bind('x', from.subject('x1').and.subject('x2').all.map(min)),
  bind('width', from.subject('x1').and.subject('x2').all.map(|a, b => abs(a - b))),
  bind('y', from.subject('y1').and.subject('y2').all.map(min)),
  bind('height', from.subject('y1').and.subject('y2').all.map(|a, b => abs(a - b)))
);
class RectView extends DomView.build(RectVM, $(`
  <div class="rect annotation">
    <div class="tools edit-chrome">
      <label><span class="input-round"/>round</label>
      <label><span class="input-invert"/>inv</label>
      <button class="delete">x</button>
    </div>
    <div class="handle handle-1 edit-chrome"/>
    <div class="handle handle-2 edit-chrome"/>
  </div>`), template(
  find('.rect')
    .css('left', from.vm('x').map(pct))
    .css('top', from.vm('y').map(pct))
    .css('width', from.vm('width').map(pct))
    .css('height', from.vm('height').map(pct)),

  find('.handle-1')
    .classGroup('x', from('x1').and('x2').all.map(lcomp))
    .classGroup('y', from('y1').and('y2').all.map(lcomp))
    .on('mousedown', drag('x1', 'y1')),
  find('.handle-2')
    .classGroup('x', from('x2').and('x1').all.map(lcomp))
    .classGroup('y', from('y2').and('y1').all.map(lcomp))
    .on('mousedown', drag('x2', 'y2')),

  toggle('round'), toggle('invert'),
  find('.delete').on('click', |_, rect -> rect.destroy())
));

////////////////////////////////////////////////////////////////////////////////
// EXPORT

class ExportView extends DomView.build(
  $(`<div><textarea/><button>done</button></div>`),
  template(
    find('textarea').text(from('data').map(JSON.stringify)),
    find('button').on('click', |_, _, view -> view.closest_(Projector).subject.unset('export'))
));


module.exports = library -> {
  library.register(Projector, ProjectorView);
  library.register(Slide, SlideListView);
  library.register(Slide, SlideMainView, { context: 'screen' });
  library.register(Shot, ShotView);
  library.register(Shot, ShotEditor, { context: 'edit' });
  library.register(Frame, FrameEditor);
  library.register(Text, TextView);
  library.register(Rect, RectView);
  library.register(Export, ExportView);
};

